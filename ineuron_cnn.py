# -*- coding: utf-8 -*-
"""ineuron_CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xYVIJYtQ4zrJxQCYjodYZ5vMw1kroSNU
"""

from google.colab import drive

drive.mount('/content/gdrive')

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x

from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense

# Initializing the CNN
classifier=Sequential()
# Step 1 Convolutiom 
classifier.add(Conv2D(32,(3, 3), input_shape = (64, 64, 3), activation = 'relu'))
# Step 2 MaxPooling
classifier.add(MaxPooling2D(pool_size=(2,2)))
# Addinng Second Convolution layer
classifier.add(Conv2D(32,(3,3),activation='relu'))
classifier.add(MaxPooling2D(pool_size=(2,2)))

# step 3 Flatteing 
classifier.add(Flatten())

# Step 4 Full Connetction
classifier.add(Dense(128,activation='relu'))
classifier.add(Dense(3,activation='softmax')) # Here we are using unit=3 for multi class classification

# Compiling the CNN
classifier.compile(optimizer='SGD',loss='categorical_crossentropy',metrics=['accuracy'])

#Part 2 -Fitting the CNN to images
from  keras.preprocessing.image import ImageDataGenerator
trian_datagen=ImageDataGenerator(rescale=1./255,
                                shear_range=0.2,
                                zoom_range=0.2,
                                horizontal_flip=True)
test_datagen=ImageDataGenerator(rescale=1./255)

training_set=trian_datagen.flow_from_directory('/content/gdrive/My Drive/Dataset_assignment',
                                              target_size=(64,64),
                                              batch_size=32,
                                              )

test_set = test_datagen.flow_from_directory('/content/gdrive/My Drive/Dataset_assignment',
                                            target_size = (64, 64),
                                            batch_size = 32,
                                            )
classifier.fit_generator(training_set,
                         steps_per_epoch = 1000,
                         epochs = 3,
                         validation_data = test_set,    
                         validation_steps = 100)
import numpy as np
from keras.preprocessing import image
test_image = image.load_img('/content/gdrive/My Drive/20141127_123334.jpg', target_size = (64, 64))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0)
result = classifier.predict(test_image)
print(result)
print(result.shape)
training_set.class_indices
if result[0][0] == 1:
    prediction = 'abid'
    print(prediction)
elif result[0][1]==1:
    prediction = 'faizan'
    print(prediction)
else:
   prediction='kaif'   
   print(prediction)

import numpy as np
from keras.preprocessing import image
test_image = image.load_img('/content/gdrive/My Drive/20141127_123334.jpg', target_size = (64, 64))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0)
result = classifier.predict(test_image)
print(result)
print(result.shape)
training_set.class_indices
if result[0][0] == 1:
    prediction = 'raj'
    print(prediction)
elif result[0][1]==1:
    prediction = 'pooja'
    print(prediction)
else:
   prediction='reshma'
   print(prediction)

